/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.sQLProjectLanguage.SQLSystem
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.xtext.example.sQLProjectLanguage.Add
import org.xtext.example.sQLProjectLanguage.Attribute
import java.util.ArrayList
import org.xtext.example.sQLProjectLanguage.Remove
import org.xtext.example.sQLProjectLanguage.Select
import org.xtext.example.sQLProjectLanguage.Relationship
import org.xtext.example.sQLProjectLanguage.PrimaryKey
import org.xtext.example.sQLProjectLanguage.ForeignKey
import org.xtext.example.sQLProjectLanguage.LogicalEXP
import org.xtext.example.sQLProjectLanguage.IntExp
import org.xtext.example.sQLProjectLanguage.PlusMin
import org.xtext.example.sQLProjectLanguage.PlusM
import org.xtext.example.sQLProjectLanguage.Factor
import org.xtext.example.sQLProjectLanguage.FactorD
import java.util.List

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SQLProjectLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	val SQLSystem modelInstance = resource.allContents.filter(SQLSystem).next
		modelInstance.display
		
		val addList = new ArrayList<Add> 
		addList.addAll(modelInstance.operation.filter(Add))
		
		val removeList = new ArrayList<Remove> 
		removeList.addAll(modelInstance.operation.filter(Remove))
		
		val selectList = new ArrayList<Select> 
		selectList.addAll(modelInstance.operation.filter(Select))
		
		val relationshipList = new ArrayList<Relationship> 
		relationshipList.addAll(modelInstance.operation.filter(Relationship))
		
		
		
		
		generateEntityFile(modelInstance, modelInstance.name,modelInstance.value,fsa, addList, removeList,selectList, relationshipList)
		
		
		
	   
		
	}
	
		def generateEntityFile(SQLSystem sqlsystem,String systemName, String url, IFileSystemAccess2 fsa, ArrayList<Add> addList, ArrayList<Remove> removeList, ArrayList<Select> selectList, ArrayList<Relationship> relationshipList) {
		fsa.generateFile(systemName.toFirstLower+"/db.java", generateEntity(systemName, url, addList, removeList,selectList,relationshipList))
		
		System::out.println(systemName.toFirstLower+"/db.java")
	}
	
	
	def CharSequence generateEntity(String systemName, String url, ArrayList<Add> addList, ArrayList<Remove> removeList, ArrayList<Select> selectList, ArrayList<Relationship> relationshipList) '''
	package «systemName.toFirstLower»;
	import java.sql.Connection;
	import java.sql.DatabaseMetaData;
	import java.sql.DriverManager;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.Statement;
	
	public class db {
	
	private String url = "«url»" ;
	private String username;
	private String password;
	Connection db = null;
	
	
	«generateConstructor()»
	
	
	«FOR a:addList» 
	«generateAddStatement(a)»
	 «ENDFOR»
	 
	«FOR a:selectList» 
		«generateSelectStament(a)»
    «ENDFOR»

	«FOR a:removeList» 
		«generateRemoveStatement(a)»
		 «ENDFOR»

	
	 «FOR a:relationshipList» 
	 		«generateRelationshipStament(a)»
	 		 «ENDFOR» 
	}
	'''
	

	
	def generateAddStatement(Add entity) '''
	 public void add«entity.name»(«IF entity.primeryKey !== null»«entity.primeryKey.type» «entity.primeryKey.name», «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.type» «a.name»«ENDFOR»){
	 	try {
	 	      Statement st = db.createStatement();
	 	      DatabaseMetaData dbm = db.getMetaData();
	 	      ResultSet tables = dbm.getTables(null, null, "«entity.name»", null);
	 	       if(tables.next()){
	 	         
	 	        }else{
	 	          ResultSet rs = st.executeQuery("CREATE TABLE «entity.name» («IF entity.primeryKey !== null» «entity.primeryKey.name» «IF entity.primeryKey.type == "String"» varchar(255) «ELSE» int «ENDIF» , «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.name» «IF a.type == "String"» varchar(255) «ELSE» int «ENDIF» «ENDFOR» «IF entity.primeryKey!= null», PRIMARY KEY(«entity.primeryKey.name»)«ENDIF»);");  
	 	            }
	 	            st.close();
	 	            //st2.close();
	 	            }
	 	        catch (java.sql.SQLException e) {
	 	            System.out.println(e.getMessage());
	 	        }try {
	 	            Statement st = db.createStatement();
	 	            «IF (entity.primeryKey !== null && entity.primeryKey.requirement1 !== null) || checkForNull(entity) == true» if(«IF (entity.primeryKey !== null && entity.primeryKey.requirement1 !== null)» «entity.primeryKey.name» «entity.primeryKey.requirement1.op.type» «entity.primeryKey.requirement1.right.exp.exp1.prim.value»«ENDIF» «IF checkForNull(entity) == true && (entity.primeryKey !== null && entity.primeryKey.requirement1 !== null)» && «ELSE» «ENDIF»«displayAllRequere(entity.attributes)»){«ENDIF»
	 	            ResultSet rs2 = st.executeQuery("INSERT INTO «entity.name»(«IF entity.primeryKey !== null» «entity.primeryKey.name» , «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.name» «ENDFOR») VALUES(«IF entity.primeryKey!== null» «IF entity.primeryKey.type == "String"»'"+«entity.primeryKey.name»+"' «ELSE» "+«entity.primeryKey.name»+" «ENDIF»,«ENDIF»«FOR a:entity.attributes SEPARATOR ", "» «IF a.type == "String"» '"+«a.name»+"' «ELSE» "+«a.name»+" «ENDIF»«ENDFOR» );");
	 	            rs2.close();
	 	            st.close();
	 	             «IF (entity.primeryKey !== null && entity.primeryKey.requirement1 !== null) || checkForNull(entity) == true»}«ENDIF»
	 	            }
	 	        catch (java.sql.SQLException e) {
	 	            System.out.println(e.getMessage());
	 	        } 
	 	
	 }
	 
	 '''
	def displayAllRequere(List<Attribute> entity){
		var str = ""
		for(i: 0 ..< entity.size){
			if(entity.get(i).requirement1 !== null ){
				str = str + entity.get(i).name+" "+ entity.get(i).requirement1.op.type +" "+entity.get(i).requirement1.right.exp.exp1.prim.value +checkForPLUSMIN(entity.get(i).requirement1.right)+  " && "
				if(i+1 == entity.size){
					str = str.substring(0,str.length - 4)
					
			 }
					
			} 
		}
		if( str.substring(str.length - 4, str.length) == " && " ){
			str = str.substring(0,str.length - 4)
		}
		str
	}
	
	def generateRemoveStatement(Remove entity)'''
	
	 public void remove«entity.name»(«showAllNoneRequere(entity.attributes)»){
	        try {
	            
	            Statement st = db.createStatement();
	            ResultSet rs = st.executeQuery("Delete FROM «entity.table.table.name» WHERE «FOR a:entity.attributes SEPARATOR " and "»«IF a.requirement1 !== null»«displayAllSelectRequere(a)»«ELSE»«a.name» «IF a.type == "String"» ='"+«a.name»+"' «ELSE» ="+«a.name»+" «ENDIF» «ENDIF»  «ENDFOR»" );
	          
	            rs.close();
	            st.close();
	            }
	        catch (java.sql.SQLException e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    
	'''
	
	def checkForNull(Add entity){
		var test = false
		for(Attribute a : entity.attributes){
			if(a.requirement1 !== null){
				test = true
			}
		}
		test
	} 
	
	
	def checkForPLUSMIN(PlusMin entity){
		var str = ""
		for (PlusM a : entity.tal){
			str = str + a.type+ a.tal.exp1.prim.value
		}
	str
	}
	
	//def checkForGangDiv(Factor entity){
		//var str = ""
		//for (FactorD a : entity.tal){
			//str = str + a.type + a.tal.prim.value
		//}
	//str
	//}
	
	def showAllNoneRequere(List<Attribute> entity){
		var str ="" 
		for(i: 0 ..< entity.size){
			if(entity.get(i).requirement1 == null){
				str = str + entity.get(i).type+ " "+ entity.get(i).name+ " , "
			}
		}
		if(str.length > 0 )
		if(str.substring(str.length - 3, str.length) == " , " ){
			str = str.substring(0,str.length - 3)
		}
		str
		
	}
	
	
	
	def generateSelectStament(Select entity)'''
	 public void select«entity.name»(«showAllNoneRequere(entity.attributes)»){
	        try {
	            Statement st = db.createStatement();
	            ResultSet rs = st.executeQuery("SELECT * FROM «entity.table.table.name» WHERE «FOR a:entity.attributes SEPARATOR " and "»«IF a.requirement1 !== null»«displayAllSelectRequere(a)»«ELSE»«a.name» «IF a.type == "String"» ='"+«a.name»+"' «ELSE» ="+«a.name»+" «ENDIF» «ENDIF»  «ENDFOR»");
	
	            while (rs.next()) {
	             «var n = 1»
	             «FOR a:entity.attributes»
	              System.out.print("«a.name» returned ");
	              System.out.println(rs.getString(«n»));
	              //«n = n+1»
	             «ENDFOR»
	             
	            }
	            rs.close();
	            st.close();
	            }
	        catch (java.sql.SQLException e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    
	'''
	
		def displayAllSelectRequere(Attribute entity){
		var str = ""
		str = str+ entity.name +" "+entity.requirement1.op.type +" "+entity.requirement1.right.exp.exp1.prim.value+""+checkForPLUSMIN(entity.requirement1.right)
		
		str
		}
		
		
		
		
	
	
	def generateRelationshipStament(Relationship entity)'''
	    public void relationship«entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.type» «a.name»«ENDFOR»){
	            try {
	                Statement st = db.createStatement();
	                DatabaseMetaData dbm = db.getMetaData();
	                ResultSet tables = dbm.getTables(null, null,"«entity.name»" , null);
	                if(tables.next()){
	                    
	                }else{
	                 ResultSet rs = st.executeQuery("CREATE TABLE «entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.name»«IF a.type == "String"» varchar(255)«ELSE» int«ENDIF»«ENDFOR» ,«FOR a:entity.foreignkey SEPARATOR ", "» FOREIGN KEY(«a.name») REFERENCES «a.overType.name» («a.name»)«ENDFOR»);");
	                           
	                }
	                
	                st.close();
	                //st2.close();
	                }
	            catch (java.sql.SQLException e) {
	                System.out.println(e.getMessage());
	            }try {
	                Statement st = db.createStatement();
	                ResultSet rs2 = st.executeQuery("INSERT INTO «entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.name»«ENDFOR») VALUES(«FOR a:entity.foreignkey SEPARATOR ", "»«IF a.type =="String"»'"+«a.name»+"'«ELSE»"+«a.name»+" «ENDIF»«ENDFOR»);");
	                rs2.close();
	                st.close();
	                //st2.close();
	                }
	            catch (java.sql.SQLException e) {
	                System.out.println(e.getMessage());
	            }
	        }
	    
		'''
	 
	
	
	
	def generateConstructor() '''
	public db (String Username, String Password) throws SQLException{
		this.username = Username;
		this.password = Password;
		
		try{
		Class.forName("org.postgresql.Driver");
		db = DriverManager.getConnection(url, Username, Password);
	 	}
		catch (java.lang.ClassNotFoundException e) {
	            System.out.println(e.getMessage());
	     }
	}
	 
	'''
	

	
	
	
	
	
		def display(EObject model) {
  		val res = new XMLResourceImpl
  		res.contents.add(EcoreUtil::copy(model))
  		System::out.println("Dump of model:")
  		res.save(System.out, null);
	}
}
